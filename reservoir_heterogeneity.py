# -*- coding: utf-8 -*-
"""Reservoir Heterogeneity

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PVlAPGH30Eek9NyVZNWJ82U-9et9Lvqz
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Generate random data for the homogeneous sandstone reservoir
res1 = np.random.randint(45, 50, (20, 20))

# Calculate the mean and standard deviation for res1
mean1 = np.mean(res1)
std_dev1 = np.std(res1)

# Generate random data for the heterogeneous carbonate reservoir
res2 = np.random.uniform(0.01, 100, (20, 20))

# Calculate the mean and standard deviation for res2
mean2 = np.mean(res2)
std_dev2 = np.std(res2)

print(mean1)
print(std_dev1)
print(mean2)
print(std_dev2)
print(res1)
plt.figure(figsize=(8,8))
sns.heatmap(res1,center=1,cmap="YlOrBr")
np.set_printoptions(linewidth=np.inf)
res22 = res2.round(2)

print(res22)
plt.figure(figsize=(8,8))
sns.heatmap(res2,center=1,cmap="YlOrBr")
# Create a range of x values for the normal distribution plot
x1 = np.linspace(mean1 - 3 * std_dev1, mean1 + 3 * std_dev1, 100)
x2 = np.linspace(mean2 - 3 * std_dev2, mean2 + 3 * std_dev2, 100)

# Calculate the probability density functions for the normal distributions
pdf1 = (1 / (std_dev1 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x1 - mean1) / std_dev1) ** 2)
pdf2 = (1 / (std_dev2 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x2 - mean2) / std_dev2) ** 2)

# Create the plot
plt.figure(figsize=(10, 6))
plt.plot(x1, pdf1, label='Homogeneous Sandstone Reservoir')
plt.plot(x2, pdf2, label='Heterogeneous Carbonate Reservoir')
plt.title('Normal Distribution Plot for Reservoir Data')
plt.xlabel('X')
plt.ylabel('Probability Density')
plt.legend()
plt.grid(True)
plt.show()